<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="fd894493-740c-4a18-ac21-06f6d29e91d9" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/9.0/project-config.xsd">
  <name>Catalyst Build Stage 1-4</name>
  <description>Gentoo Catalyst Stage Burner</description>
  <settings>
    <options>
      <option name="executionTimeoutMin" value="180" />
    </options>
    <disabled-settings>
      <setting-ref ref="RUNNER_52" />
      <setting-ref ref="RUNNER_57" />
    </disabled-settings>
    <parameters>
      <param name="param.aws.account.name" value="ccon" spec="text description='Account Name' label='Account ID' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.args.ccache.clear" value="0" spec="checkbox description='Clear the C Cache, generally the thing to do if compile fails' label='Clear Ccache' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.debug" value="0" spec="checkbox description='Enable Debugging' label='Debug' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.fetch.latest" value="1" spec="checkbox description='Fetch Latest Stage' label='Fetch Latest' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.purge" value="0" spec="checkbox description='Purge previous builds' label='Purge' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.release.multilib" value="/no-multilib" spec="checkbox description='Enable Multilib' label='Multilib' uncheckedValue='/no-multilib' display='prompt' checkedValue=''" />
      <param name="param.catalyst.args.release.selinux" value="" spec="checkbox description='Enable Selinux' label='Selinux' display='prompt' checkedValue='/selinux'" />
      <param name="param.catalyst.args.resume" value="1" spec="checkbox description='Auto Resume Catalyst Build' label='Autoresume' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.slack.enabled" value="1" spec="checkbox description='Enable Slack Notifications' label='Slack Notify' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage1.skip" value="0" spec="checkbox description='Skip Building Stage 1' label='Skip Stage 1' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage2.skip" value="0" spec="checkbox description='Skip Building Stage 2' label='Skip Stage 2' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage3.skip" value="1" spec="checkbox description='Skip Stage 3 (default)' label='Skip Stage 3' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage4.skip" value="1" spec="checkbox description='Skip Stage 4' label='Skip Stage 4' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.verbose" value="0" spec="checkbox description='Enable Verbosity' label='Verbose' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.build.kernel.version" value="4.1.7" spec="text description='Version of Kernel to Install inside Stages' label='Kernel Version' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.post.ami.bake" value="1" spec="checkbox description='Build Amazon AMI?' label='Bake AMI?' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.build.profile" value="%param.catalyst.build.release.type%/linux/%param.catalyst.build.subarch%%param.catalyst.args.release.multilib%%param.catalyst.args.release.selinux%" spec="text description='Gentoo Profile' label='Profile' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.release.name" value="deusOS" spec="text description='Name of release' label='Name' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.release.type" value="hardened" spec="text description='Release Type' label='Type' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.snapshot" value="latest" />
      <param name="param.catalyst.build.source.path" value="%param.catalyst.build.release.type%/%param.catalyst.build.subarch%/stage3-%param.catalyst.build.subarch%" />
      <param name="param.catalyst.build.subarch" value="amd64" spec="text description='Architecture' label='Arch' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.target.domain" value="%param.catalyst.build.target.realm%.ccon.io" />
      <param name="param.catalyst.build.target.host" value="deus" spec="text description='Target Hostname' label='Hostname' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.target.realm" value="midgard" />
      <param name="param.catalyst.build.version" value="" spec="text description='Version Stamp' label='Version' validationMode='any' display='prompt'" />
      <param name="param.catalyst.post.emerge" value="" spec="text description='Additional packages to merge' label='Emerge' validationMode='any' display='prompt'" />
      <param name="param.catalyst.post.slack.channel" value="provisioning" />
      <param name="param.catalyst.post.slack.user" value="marvyn" />
      <param name="param.catalyst.post.users" value="" spec="text description='Additional Users (space delimeted)' label='Users' validationMode='any' display='prompt'" />
      <param name="param.catalyst.provision.method" value="thin" spec="text regexp='thin||slim||thick' display='prompt' validationMessage='Please specify one of thin, slim or thick' description='Provisioning Method (thin,slim,thick)' label='Provisioning Method' validationMode='regex'" />
      <param name="teamcity.build.target.platform" value="aws" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_50" name="Set Vars" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[set -u -o pipefail
(( %param.catalyst.args.debug% == 1 )) && set -x
CATALYST_ARGS=""

BUILD_BUILDER=%teamcity.build.triggeredBy.username%
[[ $BUILD_BUILDER =~ "teamcity.build.triggeredBy.username" ]] && BUILD_BUILDER='bnadmin'

echo "Built by: $BUILD_BUILDER"

(( %param.catalyst.args.purge% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -p"
(( %param.catalyst.args.debug% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -d"
(( %param.catalyst.args.verbose% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -v"
(( %param.catalyst.args.resume% == 0 )) && CATALYST_ARGS="${CATALYST_ARGS} -a"
REL_PROFILE="%param.catalyst.build.profile%"
REL_PROFILE=$(echo ${REL_PROFILE}|sed 's/\//\\\//g')
echo ${REL_PROFILE}
for var in WORK_DIR="/var/data/catalyst/builds/%param.catalyst.build.release.name%"\
    BUILD_START="$(date +%s)"\
    TEMPLATE_DIR="/etc/catalyst/templates/common"\
    TEMPLATE_BASE="/etc/catalyst/templates"\
    SNAPSHOT_DIR="/var/data/catalyst/snapshots"\
    SUB_ARCH="%param.catalyst.build.subarch%"\
    PROVISION_METHOD="%param.catalyst.provision.method%"\
    BUILD_BUILDER="${BUILD_BUILDER}"\
    CATALYST_ARGS="'${CATALYST_ARGS}'"\
    KERNEL_VERSION="%param.catalyst.build.kernel.version%"\
    REL_TYPE="%param.catalyst.build.release.type%"\
    REL_NAME="%param.catalyst.build.release.name%"\
    REL_PROFILE="'${REL_PROFILE}'"\
    REL_SNAPSHOT="%param.catalyst.build.snapshot%"\
    SRC_PATH="%param.catalyst.build.source.path%"\
    SNAPSHOT="%param.catalyst.build.snapshot%"\
    SNAPSHOT_PATH="/var/data/catalyst/snapshots"\
    USERS="'%param.catalyst.post.users%'"\
    TARGET_HOST="%param.catalyst.build.target.host%"\
    TARGET_DOMAIN="%param.catalyst.build.target.domain%"\
    BUILD_TARGET="%teamcity.build.target.platform%"\
    CPU_COUNT="$(nproc)"\
    ROOT_OVERLAY="/var/data/catalyst/tmp/%param.catalyst.build.release.name%/root-overlay"\
    STAGE_RESUME="%param.catalyst.args.resume%"
do
    echo ${var}
done > build-vars-common.sh

source $(pwd)/build-vars-common.sh || exit 1

CATALYST_DIST_BASE='http://distfiles.gentoo.org/releases'
CATALYST_DIST_STAGE3_PATH="${SUB_ARCH}/autobuilds/current-stage3-${SUB_ARCH}-${REL_TYPE}"
CATALYST_DIST_STAGE3_MANIFEST="latest-stage3-${SUB_ARCH}-${REL_TYPE}.txt"
if [[ "${REL_PROFILE}" =~ "no-multilib" ]] 
then
    echo "No Multilib"
    CATALYST_DIST_STAGE3_PATH="${SUB_ARCH}/autobuilds/current-stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib"
    CATALYST_DIST_STAGE3_MANIFEST="latest-stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib.txt"
fi


STAGE_LATEST="$(curl -s ${CATALYST_DIST_BASE}/${SUB_ARCH}/autobuilds/${CATALYST_DIST_STAGE3_MANIFEST}|grep bz2|cut -d/ -f1)"
STAGE_FETCH_LATEST="%param.catalyst.args.fetch.latest%"

if (( ${STAGE_FETCH_LATEST} == 1 ))
then
    BUILD_VER="${STAGE_LATEST}"
else
    BUILD_VER="%param.catalyst.build.version%"
fi

[[ -z ${BUILD_VER} ]] && echo "Build Version is empty" && exit 1
echo "BUILD_VER=${BUILD_VER}" >> build-vars-common.sh

source $(pwd)/build-vars-common.sh || exit 1

CATALYST_DIST_STAGE3_BZ2="stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2"
CATALYST_DIST_STAGE3_DIGESTS="stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2.DIGESTS"
CATALYST_DIST_STAGE1_SRCPATH="stage1-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}"
CATALYST_DIST_STAGE2_SRCPATH="stage2-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}"
CATALYST_DIST_STAGE3_SRCPATH="stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}"
VERSION_STAMP="${REL_TYPE}-${BUILD_VER}"

if [[ "${REL_PROFILE}" =~ "no-multilib" ]] 
then
    echo "No Multilib"
    CATALYST_DIST_STAGE3_BZ2="stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib-${BUILD_VER}.tar.bz2"
    CATALYST_DIST_STAGE3_DIGESTS="stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib-${BUILD_VER}.tar.bz2.DIGESTS"
    CATALYST_DIST_STAGE3_PATH="${SUB_ARCH}/autobuilds/current-stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib"
    CATALYST_DIST_STAGE1_SRCPATH="stage1-${SUB_ARCH}-${REL_TYPE}+nomultilib-${BUILD_VER}"
    CATALYST_DIST_STAGE2_SRCPATH="stage2-${SUB_ARCH}-${REL_TYPE}+nomultilib-${BUILD_VER}"
    CATALYST_DIST_STAGE3_SRCPATH="stage3-${SUB_ARCH}-${REL_TYPE}+nomultilib-${BUILD_VER}"
    VERSION_STAMP="${REL_TYPE}+nomultilib-${BUILD_VER}"
fi

for var in CATALYST_DIST_BASE="${CATALYST_DIST_BASE}"\
           CATALYST_DIST_STAGE3_PATH="${CATALYST_DIST_STAGE3_PATH}"\
           CATALYST_DIST_STAGE3_BZ2="${CATALYST_DIST_STAGE3_BZ2}"\
           CATALYST_DIST_STAGE3_DIGESTS="${CATALYST_DIST_STAGE3_DIGESTS}"\
           CATALYST_DIST_STAGE3_MANIFEST="${CATALYST_DIST_STAGE3_MANIFEST}"\
           CATALYST_DIST_STAGE1_SRCPATH="${CATALYST_DIST_STAGE1_SRCPATH}"\
           CATALYST_DIST_STAGE2_SRCPATH="${CATALYST_DIST_STAGE2_SRCPATH}"\
           CATALYST_DIST_STAGE3_SRCPATH="${CATALYST_DIST_STAGE3_SRCPATH}"\
           VERSION_STAMP="${VERSION_STAMP}"
do
           echo ${var}
done >> build-vars-common.sh

[[ ${BUILD_VER} == ${STAGE_LATEST} ]] && echo "Congrats this is a current build" && exit 0
echo "There is a new build: ${STAGE_LATEST}"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_51" name="Build Dependencies" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[set -u
(( %param.catalyst.args.debug% == 1 )) && set -x
source $(pwd)/build-vars-common.sh || exit 1

if (( %param.catalyst.args.ccache.clear% == 1 )) 
then
    echo "Clearing Compile Cache"
    sudo /bin/rm -rf /var/data/catalyst/tmp/${REL_NAME}/stage1-${SUB_ARCH}-${BUILD_VER}/var/ccache/* || exit 1
    sudo /bin/rm -rf /var/data/catalyst/tmp/${REL_NAME}/stage2-${SUB_ARCH}-${BUILD_VER}/var/ccache/* || exit 1
fi

[[ -f /etc/catalyst/kernels/${SUB_ARCH}-${REL_TYPE}-${BUILD_TARGET}-${KERNEL_VERSION}.config ]] || exit 1

[[ -d ${ROOT_OVERLAY} ]] || mkdir -p ${ROOT_OVERLAY}
rsync -racv --delete /etc/catalyst/overlays/common/root/ ${ROOT_OVERLAY}/ || exit 1]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_52" name="Slack Notification" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.args.slack.enabled% == 1 )) || exit 0
(( %param.catalyst.args.stage2.skip% == 1 )) && exit 0
set -u -o pipefail

source $(pwd)/build-vars-common.sh || exit 1

SLACK_USER=%param.catalyst.post.slack.user%
SLACK_CHANNEL=%param.catalyst.post.slack.channel%

echo "Checking for hacky overlay"
[[ -d ${ROOT_OVERLAY}/etc/local.d/ ]] || mkdir -p ${ROOT_OVERLAY}/etc/local.d/
(( $? == 0 )) || exit 1

sed -e "s/###SLACK_USER###/${SLACK_USER}/"\
    -e "s/###SLACK_CHANNEL###/${SLACK_CHANNEL}/"\
    -e "s/###BUILD_BUILDER###/${BUILD_BUILDER}/" /etc/catalyst/templates/common/slack-notify.start.template > ${ROOT_OVERLAY}/etc/local.d/slack-notify.start || exit 1]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_53" name="Stage 1 Build" type="simpleRunner">
        <parameters>
          <param name="command.executable" value="/usr/local/bin/genisys" />
          <param name="command.parameters" value="-T stage -S 1 -A %param.catalyst.build.subarch% -N %param.catalyst.build.release.name% -P %param.catalyst.build.release.type% -K %param.catalyst.build.kernel.version% %param.catalyst.args.release.multilib% %param.catalyst.args.release.selinux% %param.catalyst.args.debug% %param.catalyst.args.verbose%" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_48" name="Stage 2 Build" type="simpleRunner">
        <parameters>
          <param name="command.executable" value="/usr/local/bin/genisys" />
          <param name="command.parameters" value="-T stage -S 2 -A %param.catalyst.build.subarch% -N %param.catalyst.build.release.name% -P %param.catalyst.build.release.type% -K %param.catalyst.build.kernel.version% %param.catalyst.args.release.multilib% %param.catalyst.args.release.selinux% %param.catalyst.args.debug% %param.catalyst.args.verbose%" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_49" name="Stage 3 Build" type="simpleRunner">
        <parameters>
          <param name="command.executable" value="/usr/local/bin/genisys" />
          <param name="command.parameters" value="-T stage -S 3 -A %param.catalyst.build.subarch% -N %param.catalyst.build.release.name% -P %param.catalyst.build.release.type% -K %param.catalyst.build.kernel.version% %param.catalyst.args.release.multilib% %param.catalyst.args.release.selinux% %param.catalyst.args.debug% %param.catalyst.args.verbose%" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_61" name="Stage 4 Build" type="simpleRunner">
        <parameters>
          <param name="command.executable" value="/usr/local/bin/genisys" />
          <param name="command.parameters" value="-T stage -S 4 -A %param.catalyst.build.subarch% -N %param.catalyst.build.release.name% -P %param.catalyst.build.release.type% -K %param.catalyst.build.kernel.version% %param.catalyst.args.release.multilib% %param.catalyst.args.release.selinux% %param.catalyst.args.debug% %param.catalyst.args.verbose%" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_57" name="Bake AMI" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.build.post.ami.bake% == 1 )) || exit 0
(( %param.catalyst.args.debug% == 1 )) && set -x
source $(pwd)/build-vars-common.sh || exit 1

AWS_ACCOUNT_ID=$(grep ^%param.aws.account.name% /etc/ec2/accounts.db|cut -d: -f2)

[[ -d /var/srv/images/ami/${REL_NAME}/ ]] || mkdir /var/srv/images/ami/${REL_NAME}/
START_TIME=$(date +%s)
mkdir -p /var/srv/images/ami/${REL_NAME}/${BUILD_VER}/ 
echo 'pemkey' | ec2-bundle-image -k /etc/catalyst/keys/key.pem -c /etc/ec2/amitools/cert-ec2.pem  -u ${AWS_ACCOUNT_ID} -i  /var/data/catalyst/iso/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso -d /var/srv/images/ami/${REL_NAME}/${BUILD_VER}/ -r x86_64 || exit 1
END_TIME=$(date +%s)

BUILD_TIME=$(( END_TIME - START_TIME ))

seconds=${BUILD_TIME}
hours=$((seconds / 3600))
seconds=$((seconds % 3600))
minutes=$((seconds / 60))
seconds=$((seconds % 60))

BUILD_TIME="${hours}h:${minutes}m:${seconds}s"

echo "[$(date)]: Built AMI: ${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER} in: ${BUILD_TIME}" >> /var/log/catalyst-build.log]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_60" name="CleanUp" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[source $(pwd)/build-vars-common.sh || exit 1


for pid in ${ZMQ_PID} ${ZMQ_LPID}
do
    echo "Checking for stale processes"
    kill -0 ${pid} &> /dev/null || continue
    echo "Killing stale processes"
    kill ${pid} 
    sleep 1 
    kill -0 ${pid} &> /dev/null || continue
    echo "Kill like you mean it"
    kill -9 ${pid}
done]]></param>
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Gentoo_Catalyst_GentooCatalyst">
        <checkout-rule rule="+:.=&gt;catalyst/" />
      </vcs-entry-ref>
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="vcsTrigger" type="vcsTrigger">
        <parameters>
          <param name="quietPeriodMode" value="DO_NOT_USE" />
          <param name="triggerRules" value="+:root=Gentoo_Catalyst_GentooCatalyst:**" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters />
      </extension>
    </build-extensions>
    <cleanup />
  </settings>
</build-type>

