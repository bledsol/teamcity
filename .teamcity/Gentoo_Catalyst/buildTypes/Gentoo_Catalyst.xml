<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="5d4216ef-ce5e-408f-8843-f727c4d6d563" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/9.0/project-config.xsd">
  <name>Catalyst Deployment</name>
  <description>Gentoo Catalyst Stage Burner</description>
  <settings>
    <disabled-settings>
      <setting-ref ref="RUNNER_37" />
    </disabled-settings>
    <parameters>
      <param name="param.catalyst.ccache.clear" value="0" spec="checkbox description='Clear the C Cache, generally the thing to do if compile fails' label='Clear Ccache' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.portage.emerge" value="" spec="text description='Additional packages to merge' label='Emerge' validationMode='any' display='prompt'" />
      <param name="param.profile" value="hardened/linux/amd64" spec="text description='Gentoo Profile' label='Profile' validationMode='not_empty' display='normal'" />
      <param name="param.release.name" value="ccon" spec="text description='Name of release' label='Name' validationMode='not_empty' display='prompt'" />
      <param name="param.release.type" value="hardened" spec="text description='Release Type' label='Type' validationMode='not_empty' display='normal'" />
      <param name="param.slack.channel" value="general" />
      <param name="param.slack.user" value="marvyn" />
      <param name="param.snapshot" value="latest" />
      <param name="param.source.path" value="hardened/amd64/stage3-amd64-live" />
      <param name="param.stage.fetchLatest" value="1" spec="checkbox description='Fetch Latest Stage' label='Fetch Latest' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.stage.resume" value="1" spec="checkbox description='Auto Resume Catalyst Build' label='Autoresume' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.stage1.skip" value="0" spec="checkbox description='Skip Building Stage 1' label='Skip Stage 1' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.stage2.skip" value="0" spec="checkbox description='Skip Building Stage 2' label='Skip Stage 2' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.subarch" value="amd64" spec="text description='Architecture' label='Arch' validationMode='not_empty' display='normal'" />
      <param name="param.target" value="livecd" spec="text description='Target Medium' label='Target' validationMode='not_empty' display='normal'" />
      <param name="param.target.host" value="scout" spec="text description='Target Hostname' label='Hostname' validationMode='not_empty' display='prompt'" />
      <param name="param.users" value="" spec="text description='Additional Users (space delimeted)' label='Users' validationMode='any' display='prompt'" />
      <param name="param.version" value="" spec="text description='Version Stamp' label='Version' validationMode='any' display='prompt'" />
      <param name="slack.enabled" value="1" spec="checkbox description='Enable Slack Notifications' label='Slack Notify' uncheckedValue='0' display='prompt' checkedValue='1'" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_41" name="Set Vars" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[for var in WORK_DIR="/var/data/catalyst/builds/%param.release.name%"\
    TEMPLATE_DIR="/etc/catalyst/templates/%param.release.name%"\
    SNAPSHOT_DIR="/var/data/catalyst/snapshots"\
    SUB_ARCH="%param.subarch%"\
    BUILD_VER="${BUILD_VER}"\
    BUILD_BUILDER="%teamcity.build.triggeredBy.username%"\
    REL_TYPE="%param.release.type%"\
    REL_NAME="%param.release.name%"\
    REL_PROFILE="%param.profile%"\
    REL_SNAPSHOT="%param.snapshot%"\
    SRC_PATH="%param.source.path%"\
    SNAPSHOT="%param.snapshot%"\
    USERS="%param.users%"\
    TARGET="%param.target%"\
    TARGET_HOST="%param.target.host%"\
    STAGE_RESUME="%param.stage.resume%"
do
    echo ${var}
done > build-vars-common.sh

source $(pwd)/build-vars-common.sh || exit 1

STAGE_LATEST="$(curl -s http://distfiles.gentoo.org/releases/amd64/autobuilds/latest-stage3-amd64-hardened.txt|grep stage3-${SUB_ARCH}-${REL_TYPE}|cut -d/ -f1)"
STAGE_FETCH_LATEST="%param.stage.fetchLatest%"

if (( ${STAGE_FETCH_LATEST} == 1 ))
then
    BUILD_VER="${STAGE_LATEST}"
else
    BUILD_VER="%param.version%"
fi
[[ -z ${BUILD_VER} ]] && echo "Build Version is empty" && exit 1
echo "BUILD_VER=${BUILD_VER}" >> build-vars-common.sh

[[ ${BUILD_VER} == ${STAGE_LATEST} ]] && echo "Congrats this is a current build" && exit 0
echo "There is a new build: ${STAGE_LATEST}"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_44" name="Build Overlays" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[set -u
source $(pwd)/build-vars-common.sh || exit 1

[[ -f /etc/catalyst/kernels/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-4.1.12-livecd.config ]] || cp /etc/catalyst/kernels/amd64-hardened-4.1.12-livecd.config /etc/catalyst/kernels/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-4.1.12-livecd.config

echo "Synchronizing Overlays"
sudo /usr/bin/rsync -rca --delete /etc/catalyst/overlays/common/root_overlay/ /etc/catalyst/overlays/${REL_NAME}/root/ || exit 1
sudo /usr/bin/rsync -rca --delete /etc/catalyst/overlays/common/overlay/livedvd/ /etc/catalyst/overlays/${REL_NAME}/deus/ || exit 1

(( %param.ccache.clear% == 0 )) && exit 0
echo "Clearing Compile Cache"
sudo rm /var/data/catalyst/tmp/${REL_NAME}/livecd-stage1-${SUB_ARCH}-${BUILD_VER}/var/ccache/ || exit 1
sudo rm /var/data/catalyst/tmp/${REL_NAME}/livecd-stage2-${SUB_ARCH}-${BUILD_VER}/var/ccache/ || exit 1]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_42" name="Slack Notification" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %slack.enabled% == 1 )) || exit 0

set -u -o pipefail

source $(pwd)/build-vars-common.sh || exit 1

SLACK_KEY=$(egrep ^${REL_NAME} /etc/catalyst/keys/slack.api|cut -d: -f2)
SLACK_USER=%param.slack.user%
SLACK_CHANNEL=%param.slack.channel%
[[ -d /etc/catalyst/overlays/${REL_NAME}/root/etc/local.d/ ]] || mkdir -p /etc/catalyst/overlays/${REL_NAME}/root/etc/local.d/
(( $? == 0 )) || exit 1

[[ -z ${SLACK_KEY} ]] && exit 1
sed -e "s/###SLACK_USER###/${SLACK_USER}/"\
    -e "s/###SLACK_CHANNEL###/${SLACK_CHANNEL}/"\
    -e "s/###SLACK_KEY###/${SLACK_KEY}/"\
    -e "s/###BUILD_BUILDER###/${BUILD_BUILDER}/" /etc/catalyst/templates/common/slack-notify.start.template > ./slacktmp
sudo /usr/bin/rsync ./slacktmp /etc/catalyst/overlays/${REL_NAME}/root/etc/local.d/slack-notify.start
rm ./slacktmp]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_39" name="Stage 1 Build" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.stage1.skip% == 1 )) && exit 0 

set -u
source $(pwd)/build-vars-common.sh || exit 1

SPEC_FILE="stage1.spec"
TEMPLATES="stage1.spec.header.template stage1.spec.use.template stage1.spec.pkg.template"

[[ -d ${WORK_DIR} ]] || mkdir -p ${WORK_DIR}

echo "Checking for templates"
for template in ${TEMPLATES[@]}
do 
    if [[ ! -f ${TEMPLATE_DIR}/${template} ]]
    then
        echo "Missing template: ${template}" 
        exit 1
    fi
done

touch ${WORK_DIR}/${SPEC_FILE} || exit 1

echo "Mangling templates"
sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###REL_TYPE###/${REL_NAME}/" \
    -e "s/###REL_PROFILE###/${REL_TYPE}\/linux\/${SUB_ARCH}/" \
    -e "s/###REL_SNAPSHOT###/${SNAPSHOT}/" \
    -e "s/###SRC_PATH###/${REL_NAME}\/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}/" \
    ${TEMPLATE_DIR}/stage1.spec.header.template > ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >> ${WORK_DIR}/${SPEC_FILE} || exit 1
cat ${TEMPLATE_DIR}/stage1.spec.use.template >> ${WORK_DIR}/${SPEC_FILE}
echo >> ${WORK_DIR}/${SPEC_FILE} || exit 1
cat ${TEMPLATE_DIR}/stage1.spec.pkg.template >> ${WORK_DIR}/${SPEC_FILE}

if [[ ! -f ${WORK_DIR}/stage3-amd64-hardened-${BUILD_VER}.tar.bz2.DIGESTS ]] 
then
    echo "Fetching build hashes"
    wget --directory-prefix=${WORK_DIR} http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-hardened/stage3-amd64-hardened-${BUILD_VER}.tar.bz2.DIGESTS &> /dev/null
    (( $? > 0 )) && echo "Could not fetch stage3-amd64-hardened-${BUILD_VER}.tar.bz2.DIGESTS to ${WORK_DIR}" && exit 1
fi


echo "Checking build hashes"
if [[ -f ${WORK_DIR}/stage3-amd64-hardened-${BUILD_VER}.tar.bz2 ]]
then
    cd ${WORK_DIR}
    ( sha512sum -c stage3-amd64-hardened-${BUILD_VER}.tar.bz2.DIGESTS | egrep -e ": OK$" | grep "stage3-amd64-hardened-${BUILD_VER}.tar.bz2" ) &>/dev/null || exit 1
    echo "Not fetching, file exists and checksums match"
    FETCH_STAGE=0
else
    FETCH_STAGE=1
fi

(( FETCH_STAGE == 1 )) && echo "Fetching stage" && ( lftp -c pget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-hardened/stage3-amd64-hardened-${BUILD_VER}.tar.bz2 -o ${WORK_DIR}/stage3-amd64-hardened-${BUILD_VER}.tar.bz2 &> /dev/null )

echo "Taking portage snapshot"
if (( STAGE_RESUME == 0 ))
then
   sudo /usr/bin/catalyst -a -s ${SNAPSHOT}
else
   sudo /usr/bin/catalyst -s ${SNAPSHOT}
fi
echo "Running catalyst stage1"
cd ${WORK_DIR}
if (( STAGE_RESUME == 0 ))
then
    echo "Clearing resume flags..."
    sudo /usr/bin/catalyst -a -f ${SPEC_FILE} || exit 1
else
    echo "Resuming if able..."
    sudo /usr/bin/catalyst -f ${SPEC_FILE} || exit 1
fi

echo "Fin."]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_43" name="Stage 2 Build" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.stage2.skip% == 1 )) && exit 0

set -u
source $(pwd)/build-vars-common.sh || exit 1

SPEC_FILE="stage2.spec"
BUILD_BUILDER_KEY="$(finger ${BUILD_BUILDER}|grep ^ssh)"

[[ -d ${WORK_DIR} ]] || mkdir -p ${WORK_DIR}

touch ${WORK_DIR}/${SPEC_FILE} || exit 1

[[ -f ${TEMPLATE_DIR}/stage2.spec.header.template ]] || exit 1

echo "Mangling templates"
sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###REL_TYPE###/${REL_NAME}/" \
    -e "s/###REL_PROFILE###/${REL_TYPE}\/linux\/${SUB_ARCH}/" \
    -e "s/###REL_SNAPSHOT###/${SNAPSHOT}/" \
    -e "s/###SRC_PATH###/${REL_NAME}\/livecd-stage1-${SUB_ARCH}-${BUILD_VER}/" \
    ${TEMPLATE_DIR}/stage2.spec.header.template > ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >> ${WORK_DIR}/${SPEC_FILE}

sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###REL_TYPE###/${REL_TYPE}/" \
    -e "s/###REL_NAME###/${REL_NAME}/g" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###USERS###/${USERS}/" \
    ${TEMPLATE_DIR}/stage2.spec.livecd.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >>  ${WORK_DIR}/${SPEC_FILE}

sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###REL_TYPE###/${REL_TYPE}/" \
    -e "s/###REL_NAME###/${REL_NAME}/" \
    ${TEMPLATE_DIR}/stage2.spec.boot.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >>  ${WORK_DIR}/${SPEC_FILE}
cat ${TEMPLATE_DIR}/stage2.spec.livecd-post.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo "Mangling common scripts"

echo "#!/bin/bash" >  /etc/catalyst/scripts/${REL_NAME}/wrangle.sh 
echo "BUILD_BUILDER_KEY=\"${BUILD_BUILDER_KEY}\"" >>  /etc/catalyst/scripts/${REL_NAME}/wrangle.sh 
sed -e "s/###BUILD_BUILDER###/${BUILD_BUILDER}/g" \
    -e "s/###TARGET_HOST###/${TARGET_HOST}/g" /etc/catalyst/templates/common/wrangle.sh.template >> /etc/catalyst/scripts/${REL_NAME}/wrangle.sh || exit 1

echo "Running catalyst scripts"
cd ${WORK_DIR}
if (( STAGE_RESUME == 0 ))
then
    echo "Clearing resume flags..."
    sudo /usr/bin/catalyst -a -f ${SPEC_FILE} || exit 1
else
    echo "Resuming if able..."
    sudo /usr/bin/catalyst -f ${SPEC_FILE} || exit 1
fi

[[ -f /var/data/catalyst/builds/${REL_NAME}/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso ]] && mv /var/data/catalyst/builds/${REL_NAME}/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso* /var/data/images/iso/

echo "Fin."]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_37" name="Test iso" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[exec qemu-system-x86_64 -enable-kvm \
        -cpu host \
        -drive file=/var/data/amd64-hardened-installer-20151217.iso,if=e1000 \
        -net nic -net user,hostname=gentoovm \
        -m 2048M \
        -monitor stdio \
        -name "${SUB_ARCH}-hardened ${BUILD_VER}" \
        $@]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Gentoo_Catalyst_GentooReleaseEng">
        <checkout-rule rule="+:.=&gt;/etc/catalyst/release/" />
      </vcs-entry-ref>
      <vcs-entry-ref root-id="Gentoo_Catalyst_GentooCatalyst">
        <checkout-rule rule="+:.=&gt;catalyst/" />
      </vcs-entry-ref>
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="vcsTrigger" type="vcsTrigger">
        <parameters>
          <param name="quietPeriodMode" value="DO_NOT_USE" />
          <param name="triggerRules" value="+:root=Gentoo_Catalyst_GentooCatalyst:**" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters />
      </extension>
    </build-extensions>
    <cleanup />
  </settings>
</build-type>

