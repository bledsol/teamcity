<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="5d4216ef-ce5e-408f-8843-f727c4d6d563" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/9.0/project-config.xsd">
  <name>Catalyst Deployment</name>
  <description>Gentoo Catalyst Stage Burner</description>
  <settings>
    <options>
      <option name="executionTimeoutMin" value="180" />
    </options>
    <disabled-settings>
      <setting-ref ref="RUNNER_47" />
    </disabled-settings>
    <parameters>
      <param name="param.aws.account.name" value="ccon" spec="text description='Account Name' label='Account ID' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.args.ccache.clear" value="0" spec="checkbox description='Clear the C Cache, generally the thing to do if compile fails' label='Clear Ccache' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.debug" value="0" spec="checkbox description='Enable Debugging' label='Debug' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.fetch.latest" value="1" spec="checkbox description='Fetch Latest Stage' label='Fetch Latest' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.purge" value="0" spec="checkbox description='Purge previous builds' label='Purge' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.release.multilib" value="" spec="checkbox description='Enable Multilib' label='Multilib' uncheckedValue='/no-multilib' display='prompt' checkedValue=''" />
      <param name="param.catalyst.args.release.selinux" value="" spec="checkbox description='Enable Selinux' label='Selinux' display='prompt' checkedValue='/selinux'" />
      <param name="param.catalyst.args.resume" value="1" spec="checkbox description='Auto Resume Catalyst Build' label='Autoresume' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.slack.enabled" value="1" spec="checkbox description='Enable Slack Notifications' label='Slack Notify' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage1.skip" value="0" spec="checkbox description='Skip Building Stage 1' label='Skip Stage 1' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.stage2.skip" value="0" spec="checkbox description='Skip Building Stage 2' label='Skip Stage 2' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.args.verbose" value="0" spec="checkbox description='Enable Verbosity' label='Verbose' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.build.kernel.version" value="4.1.7" spec="text description='Version of Kernel to Install inside Stages' label='Kernel Version' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.post.ami.bake" value="1" spec="checkbox description='Build Amazon AMI?' label='Bake AMI?' uncheckedValue='0' display='prompt' checkedValue='1'" />
      <param name="param.catalyst.build.profile" value="%param.catalyst.build.release.type%/linux/%param.catalyst.build.subarch%%param.catalyst.args.release.multilib%%param.catalyst.args.release.selinux%" spec="text description='Gentoo Profile' label='Profile' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.release.name" value="deusOS" spec="text description='Name of release' label='Name' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.release.type" value="hardened" spec="text description='Release Type' label='Type' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.snapshot" value="latest" />
      <param name="param.catalyst.build.source.path" value="%param.catalyst.build.release.type%/%param.catalyst.build.subarch%/stage3-%param.catalyst.build.subarch%-%param.catalyst.build.target%" />
      <param name="param.catalyst.build.subarch" value="amd64" spec="text description='Architecture' label='Arch' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.target" value="livecd" spec="text description='Target Medium' label='Target' validationMode='not_empty' display='normal'" />
      <param name="param.catalyst.build.target.domain" value="%param.catalyst.build.target.realm%.ccon.io" />
      <param name="param.catalyst.build.target.host" value="deus" spec="text description='Target Hostname' label='Hostname' validationMode='not_empty' display='prompt'" />
      <param name="param.catalyst.build.target.realm" value="midgard" />
      <param name="param.catalyst.build.version" value="" spec="text description='Version Stamp' label='Version' validationMode='any' display='prompt'" />
      <param name="param.catalyst.post.emerge" value="" spec="text description='Additional packages to merge' label='Emerge' validationMode='any' display='prompt'" />
      <param name="param.catalyst.post.slack.channel" value="provisioning" />
      <param name="param.catalyst.post.slack.user" value="marvyn" />
      <param name="param.catalyst.post.users" value="" spec="text description='Additional Users (space delimeted)' label='Users' validationMode='any' display='prompt'" />
      <param name="param.catalyst.provision.method" value="thin" spec="text regexp='thin||slim||thick' display='prompt' validationMessage='Please specify one of thin, slim or thick' description='Provisioning Method (thin,slim,thick)' label='Provisioning Method' validationMode='regex'" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_41" name="Set Vars" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[set -u -o pipefail

CATALYST_ARGS=""

BUILD_BUILDER=%teamcity.build.triggeredBy.username%
[[ $BUILD_BUILDER =~ "teamcity.build.triggeredBy.username" ]] && BUILD_BUILDER='bnadmin'

echo "Built by: $BUILD_BUILDER"

(( %param.catalyst.args.purge% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -p"
(( %param.catalyst.args.debug% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -d"
(( %param.catalyst.args.verbose% == 1 )) && CATALYST_ARGS="${CATALYST_ARGS} -v"
(( %param.catalyst.args.resume% == 0 )) && CATALYST_ARGS="${CATALYST_ARGS} -a"
REL_PROFILE="%param.catalyst.build.profile%"
REL_PROFILE=$(echo ${REL_PROFILE}|sed 's/\//\\\//g')
echo ${REL_PROFILE}
for var in WORK_DIR="/var/data/catalyst/builds/%param.catalyst.build.release.name%"\
    BUILD_START="$(date +%s)"\
    TEMPLATE_DIR="/etc/catalyst/templates/common"\
    TEMPLATE_BASE="/etc/catalyst/templates"\
    SNAPSHOT_DIR="/var/data/catalyst/snapshots"\
    SUB_ARCH="%param.catalyst.build.subarch%"\
    PROVISION_METHOD="%param.catalyst.provision.method%"\
    BUILD_BUILDER="${BUILD_BUILDER}"\
    CATALYST_ARGS="'${CATALYST_ARGS}'"\
    KERNEL_VERSION="%param.catalyst.build.kernel.version%"\
    REL_TYPE="%param.catalyst.build.release.type%"\
    REL_NAME="%param.catalyst.build.release.name%"\
    REL_PROFILE="'${REL_PROFILE}'"\
    REL_SNAPSHOT="%param.catalyst.build.snapshot%"\
    SRC_PATH="%param.catalyst.build.source.path%"\
    SNAPSHOT="%param.catalyst.build.snapshot%"\
    USERS="'%param.catalyst.post.users%'"\
    TARGET="%param.catalyst.build.target%"\
    TARGET_HOST="%param.catalyst.build.target.host%"\
    TARGET_DOMAIN="%param.catalyst.build.target.domain%"\
    CPU_COUNT="$(nproc)"\
    ROOT_OVERLAY="/var/data/catalyst/tmp/%param.catalyst.build.release.name%/root-overlay"\
    STAGE_RESUME="%param.catalyst.args.resume%"
    do
    echo ${var}
done > build-vars-common.sh

source $(pwd)/build-vars-common.sh || exit 1
STAGE_LATEST="$(curl -s http://distfiles.gentoo.org/releases/amd64/autobuilds/latest-stage3-amd64-hardened.txt|grep stage3-${SUB_ARCH}-${REL_TYPE}|cut -d/ -f1)"
STAGE_FETCH_LATEST="%param.catalyst.args.fetch.latest%"

if (( ${STAGE_FETCH_LATEST} == 1 ))
then
    BUILD_VER="${STAGE_LATEST}"
else
    BUILD_VER="%param.catalyst.build.version%"
fi
[[ -z ${BUILD_VER} ]] && echo "Build Version is empty" && exit 1
echo "BUILD_VER=${BUILD_VER}" >> build-vars-common.sh

[[ ${BUILD_VER} == ${STAGE_LATEST} ]] && echo "Congrats this is a current build" && exit 0
echo "There is a new build: ${STAGE_LATEST}"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_44" name="Build Dependencies" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[set -u

source $(pwd)/build-vars-common.sh || exit 1

VM_ACCOUNT="%param.aws.account.name%"
VM_REALM="%param.catalyst.build.target.realm%"
VM_GW=$( grep "#${VM_ACCOUNT} ${VM_REALM}.gw" /etc/hosts | awk '{ print $1 }' )

[[ -f /etc/catalyst/kernels/${SUB_ARCH}-${REL_TYPE}-${TARGET}-${KERNEL_VERSION}.config ]] || exit 1

[[ -d ${ROOT_OVERLAY} ]] || mkdir -p ${ROOT_OVERLAY}
rsync -racv --delete /etc/catalyst/overlays/common/root/ ${ROOT_OVERLAY}/ || exit 1

sudo /usr/bin/virsh net-list|grep ${VM_ACCOUNT}
if (( $? > 0 ))
then
    echo "Starting network"
    sudo /usr/bin/virsh net-start --network ${VM_ACCOUNT}
fi

echo "Starting ZMQ"
/usr/local/bin/zmq_srv.py -i ${VM_GW} -s $(/usr/bin/pwgen -s -1 50) -ss $(grep ${VM_ACCOUNT} /etc/catalyst/keys/slack.api|cut -d: -f2) || exit 1

ZMQ_SS="$(cat zmq.args):$(finger ${BUILD_BUILDER}|grep ^ssh|awk '{print $1 ":" $2}')"
ZMQ_PID=$(cut -d: -f 4 zmq.args)

/usr/local/bin/zmq_srv.py -i 127.0.0.1 -s $(/usr/bin/pwgen -s -1 50) -ss ${ZMQ_SS} || exit 1

echo "ZMQ_PID=${ZMQ_PID}" >> $(pwd)/build-vars-common.sh 
[[ -z ${ZMQ_PID} ]] && exit 1

(( %param.catalyst.args.ccache.clear% == 0 )) && exit 0
echo "Clearing Compile Cache"
sudo /bin/rm -rf /var/data/catalyst/tmp/${REL_NAME}/livecd-stage1-${SUB_ARCH}-${BUILD_VER}/var/ccache/ || exit 1
sudo /bin/rm -rf /var/data/catalyst/tmp/${REL_NAME}/livecd-stage2-${SUB_ARCH}-${BUILD_VER}/var/ccache/ || exit 1]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_42" name="Slack Notification" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.args.slack.enabled% == 1 )) || exit 0

set -u -o pipefail

source $(pwd)/build-vars-common.sh || exit 1

SLACK_USER=%param.catalyst.post.slack.user%
SLACK_CHANNEL=%param.catalyst.post.slack.channel%

echo "Checking for hacky overlay"
[[ -d ${ROOT_OVERLAY}/etc/local.d/ ]] || mkdir -p ${ROOT_OVERLAY}/etc/local.d/
(( $? == 0 )) || exit 1

sed -e "s/###SLACK_USER###/${SLACK_USER}/"\
    -e "s/###SLACK_CHANNEL###/${SLACK_CHANNEL}/"\
    -e "s/###BUILD_BUILDER###/${BUILD_BUILDER}/" /etc/catalyst/templates/common/slack-notify.start.template > ${ROOT_OVERLAY}/etc/local.d/slack-notify.start || exit 1]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_39" name="Stage 1 Build" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.args.stage1.skip% == 1 )) && exit 0 

set -u
source $(pwd)/build-vars-common.sh || exit 1

TAKE_SNAPSHOT=0
SPEC_FILE="stage1.spec"
TEMPLATES="stage1.spec.header.template stage1.spec.use.template stage1.spec.pkg.template"
PKG_MERGE=( %param.catalyst.post.emerge% )

[[ -d ${WORK_DIR} ]] || mkdir -p ${WORK_DIR}

echo "Checking for templates"
for template in ${TEMPLATES[@]}
do 
    if [[ ! -f ${TEMPLATE_DIR}/${template} ]]
    then
        echo "Missing template: ${template}" 
        exit 1
    fi
done

touch ${WORK_DIR}/${SPEC_FILE} || exit 1

echo "Mangling templates"
sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###REL_TYPE###/${REL_NAME}/" \
    -e "s/###REL_NAME###/${REL_NAME}/" \
    -e "s/###REL_PROFILE###/${REL_PROFILE}/" \
    -e "s/###REL_SNAPSHOT###/${SNAPSHOT}/" \
    -e "s/###SRC_PATH###/${REL_NAME}\/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}/" \
    ${TEMPLATE_DIR}/stage1.spec.header.template > ${WORK_DIR}/${SPEC_FILE} || exit 1
echo >> ${WORK_DIR}/${SPEC_FILE} || exit 1

cat ${TEMPLATE_DIR}/stage1.spec.use.template >> ${WORK_DIR}/${SPEC_FILE}
[[ -f ${TEMPLATE_BASE}/${PROVISION_METHOD}/stage1.spec.use.template ]] && cat ${TEMPLATE_BASE}/${PROVISION_METHOD}/stage1.spec.use.template >> ${WORK_DIR}/${SPEC_FILE}
echo >> ${WORK_DIR}/${SPEC_FILE} || exit 1

cat ${TEMPLATE_BASE}/common/stage1.spec.pkg.template >> ${WORK_DIR}/${SPEC_FILE}
[[ -f ${TEMPLATE_BASE}/${PROVISION_METHOD}/stage1.spec.pkg.template ]] && cat ${TEMPLATE_BASE}/${PROVISION_METHOD}/stage1.spec.pkg.template >> ${WORK_DIR}/${SPEC_FILE}
if (( ${#PKG_MERGE[@]} > 0 ))
then
    for pkg in ${PKG_MERGE[@]}
    do
        echo " $pkg"
    done >> ${WORK_DIR}/${SPEC_FILE}
fi

if [[ ! -f ${WORK_DIR}/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2.DIGESTS ]] 
then
    echo "Fetching build hashes"
    wget --directory-prefix=${WORK_DIR} http://distfiles.gentoo.org/releases/${SUB_ARCH}/autobuilds/current-stage3-${SUB_ARCH}-${REL_TYPE}/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2.DIGESTS &> /dev/null
    (( $? > 0 )) && echo "Could not fetch stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2.DIGESTS to ${WORK_DIR}" && exit 1
fi

echo "Checking build hashes"
if [[ -f ${WORK_DIR}/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2 ]]
then
    cd ${WORK_DIR}
    ( sha512sum -c stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2.DIGESTS | egrep -e ": OK$" | grep "stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2" ) &>/dev/null || exit 1
    echo "Not fetching, file exists and checksums match"
    FETCH_STAGE=0
else
    FETCH_STAGE=1
fi

(( FETCH_STAGE == 1 )) && echo "Fetching stage" && ( lftp -c pget http://distfiles.gentoo.org/releases/${SUB_ARCH}/autobuilds/current-stage3-${SUB_ARCH}-${REL_TYPE}/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2 -o ${WORK_DIR}/stage3-${SUB_ARCH}-${REL_TYPE}-${BUILD_VER}.tar.bz2 &> /dev/null )

PORTAGE_SNAPSHOT_DATE=$(date +%s -r /var/data/catalyst/snapshots/portage-latest.tar.bz2)
TIME_NOW=$(date +%s)

PORTAGE_SNAPSHOT_AGE=$(( TIME_NOW - PORTAGE_SNAPSHOT_DATE ))

(( PORTAGE_SNAPSHOT_AGE > 14400 )) && TAKE_SNAPSHOT=1

if [[ -z ${CATALYST_ARGS} ]]
then
   if (( TAKE_SNAPSHOT == 1 ))
   then 
    echo "Taking portage snapshot"
     sudo /usr/bin/catalyst -s ${SNAPSHOT} || exit 1
   fi
   echo "Running stage 1 build"
   sudo /usr/bin/catalyst -f ${WORK_DIR}/${SPEC_FILE} || exit 1
else
   echo "Using args: ${CATALYST_ARGS}"
   if (( TAKE_SNAPSHOT == 1 ))
   then 
     echo "Taking portage snapshot"
     sudo /usr/bin/catalyst ${CATALYST_ARGS} -s ${SNAPSHOT} || exit 1
   fi
   echo "Running stage 1 build"
   sudo /usr/bin/catalyst ${CATALYST_ARGS} -f ${WORK_DIR}/${SPEC_FILE} || exit 1
fi

echo "Fin."]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_47" name="Catalyst Wrapper" type="simpleRunner">
        <parameters>
          <param name="command.executable" value="/usr/local/bin/catalyst-wraps.sh" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_43" name="Stage 2 Build" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.args.stage2.skip% == 1 )) && exit 0

set -u
source $(pwd)/build-vars-common.sh || exit 1

SPEC_FILE="stage2.spec"
BUILD_BUILDER_KEY="$(finger ${BUILD_BUILDER}|grep ^ssh)"

[[ -d ${WORK_DIR} ]] || mkdir -p ${WORK_DIR}

touch ${WORK_DIR}/${SPEC_FILE} || exit 1

[[ -f ${TEMPLATE_DIR}/stage2.spec.header.template ]] || exit 1

echo "Mangling templates"
sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###REL_TYPE###/${REL_NAME}/" \
    -e "s/###REL_PROFILE###/${REL_PROFILE}/" \
    -e "s/###REL_SNAPSHOT###/${SNAPSHOT}/" \
    -e "s/###REL_NAME###/${REL_NAME}/" \
    -e "s/###SRC_PATH###/${REL_NAME}\/${TARGET}-stage1-${SUB_ARCH}-${BUILD_VER}/" \
    ${TEMPLATE_DIR}/stage2.spec.header.template > ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >> ${WORK_DIR}/${SPEC_FILE}

sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###REL_TYPE###/${REL_TYPE}/" \
    -e "s/###REL_TARGET###/${TARGET}/g" \
    -e "s/###REL_NAME###/${REL_NAME}/g" \
    -e "s/###BUILD_VER###/${BUILD_VER}/" \
    -e "s/###CPU_COUNT###/${CPU_COUNT}/" \
    -e "s/###USERS###/${USERS}/" \
    ${TEMPLATE_DIR}/stage2.spec.${TARGET}.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >>  ${WORK_DIR}/${SPEC_FILE}

sed -e "s/###SUB_ARCH###/${SUB_ARCH}/" \
    -e "s/###REL_TYPE###/${REL_TYPE}/g" \
    -e "s/###REL_TARGET###/${TARGET}/" \
    -e "s/###KERNEL_VERSION###/${KERNEL_VERSION}/" \
    ${TEMPLATE_DIR}/stage2.spec.boot.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo >>  ${WORK_DIR}/${SPEC_FILE}
cat ${TEMPLATE_DIR}/stage2.spec.${TARGET}-post.template >> ${WORK_DIR}/${SPEC_FILE} || exit 1

echo "Mangling common scripts"

echo "#!/bin/bash" >  /var/data/catalyst/tmp/${REL_NAME}/wrangle.sh 
echo "BUILD_BUILDER_KEY=\"${BUILD_BUILDER_KEY}\"" >> /var/data/catalyst/tmp/${REL_NAME}/wrangle.sh 
sed -e "s/###BUILD_BUILDER###/${BUILD_BUILDER}/g" \
    -e "s/###TARGET_DOMAIN###/${TARGET_DOMAIN}/g" \
    -e "s/###TARGET_HOST###/${TARGET_HOST}/g" \
    -e "s/###ZMQ_PORT###/${ZMQ_PORT}/g" \
    -e "s/###ZMQ_STRING###/${ZMQ_STRING}/g" /etc/catalyst/templates/common/wrangle.sh.template >> /var/data/catalyst/tmp/${REL_NAME}/wrangle.sh || exit 1

cd ${WORK_DIR}
if [[ -z ${CATALYST_ARGS} ]]
then
    echo "Running Stage 2 build"
    sudo /usr/bin/catalyst -f ${SPEC_FILE} || exit 1
else
    echo "Running Stage 2 build with args: ${CATALYST_ARGS}"
    sudo /usr/bin/catalyst ${CATALYST_ARGS} -f ${SPEC_FILE} || exit 1
fi

if [[ -f /var/data/catalyst/builds/${REL_NAME}/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso ]]
then
    echo "Moving image to staging area"
    mv /var/data/catalyst/builds/${REL_NAME}/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso* /var/data/catalyst/iso/ || exit 1
else
    echo "ISO Not found"
    exit 1
fi

echo "Fin."
BUILD_FIN="$(date +%s)"
BUILD_TIME=$(( BUILD_FIN - BUILD_START))

seconds=${BUILD_TIME}
hours=$((seconds / 3600))
seconds=$((seconds % 3600))
minutes=$((seconds / 60))
seconds=$((seconds % 60))

BUILD_TIME="${hours}h:${minutes}m:${seconds}s"

echo "[$(date)]: Built Image: ${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso in: ${BUILD_TIME} with filesize: $(ls -alFtr /var/data/catalyst/iso/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso|awk '{ print $5 }') md5: $(md5sum /var/data/catalyst/iso/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso|awk '{ print $1 }')" >> /var/log/catalyst-build.log]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_37" name="Test iso" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[source $(pwd)/build-vars-common.sh || exit 1

VM_NAME="%param.catalyst.build.release.name%"
VM_ACCOUNT="%param.aws.account.name%"
IMG_PATH='/var/data/catalyst/iso'
IMG_NAME="${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso"
COUNT=0
ZMQ_STAT=0

(sudo /usr/bin/virsh net-list|grep ${VM_ACCOUNT}) || exit 1

VM_STATE=$(sudo /usr/bin/virsh dominfo --domain ${VM_NAME} | grep ^State | awk '{ print $2 }')
[[ ${VM_STATE} == 'running' ]] && echo "Shutting down running VM: ${VM_NAME}" && sudo /usr/bin/virsh shutdown --domain ${VM_NAME}

while [[ ${VM_STATE} == 'running' ]]
do
    echo "Waiting for VM to halt"
    (( COUNT > 40 )) && echo "Timed out" && exit 1
    (( COUNT == 20 )) && sudo /usr/bin/virsh destroy --domain ${VM_NAME} 
    VM_STATE=$(sudo /usr/bin/virsh dominfo --domain ${VM_NAME} | grep ^State | awk '{ print $2 }')
    sleep 1
    ((COUNT++))
done

sudo /usr/bin/virsh change-media --domain ${VM_NAME} --source ${IMG_PATH}/${IMG_NAME} --update hda || exit 1
sleep 1

echo "Starting VM"
sudo /usr/bin/virsh start --domain ${VM_NAME} || exit 1

echo "Waiting for ZMQ Agent"
while (( ZMQ_STAT == 0 ))
do
    ps ${ZMQ_PID} &> /dev/null
    ZMQ_STAT=$?
    sleep 1
done]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_45" name="Bake AMI" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[(( %param.catalyst.build.post.ami.bake% == 1 )) || exit 0

source $(pwd)/build-vars-common.sh || exit 1

AWS_ACCOUNT_ID=$(grep ^%param.aws.account.name% /etc/ec2/accounts.db|cut -d: -f2)

[[ -d /var/srv/images/ami/${REL_NAME}/ ]] || mkdir /var/srv/images/ami/${REL_NAME}/
START_TIME=$(date +%s)
mkdir -p /var/srv/images/ami/${REL_NAME}/${BUILD_VER}/ 
echo 'pemkey' | ec2-bundle-image -k /etc/catalyst/keys/key.pem -c /etc/ec2/amitools/cert-ec2.pem  -u ${AWS_ACCOUNT_ID} -i  /var/data/catalyst/iso/${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER}.iso -d /var/srv/images/ami/${REL_NAME}/${BUILD_VER}/ -r x86_64 || exit 1
END_TIME=$(date +%s)

BUILD_TIME=$(( END_TIME - START_TIME ))

seconds=${BUILD_TIME}
hours=$((seconds / 3600))
seconds=$((seconds % 3600))
minutes=$((seconds / 60))
seconds=$((seconds % 60))

BUILD_TIME="${hours}h:${minutes}m:${seconds}s"

echo "[$(date)]: Built AMI: ${REL_NAME}-${SUB_ARCH}-${REL_TYPE}-installer-${BUILD_VER} in: ${BUILD_TIME}" >> /var/log/catalyst-build.log]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_46" name="CleanUp" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[source $(pwd)/build-vars-common.sh || exit 1

echo "Checking for stale processes"
kill -0 ${ZMQ_PID} &> /dev/null || exit 0 
echo "Killing stale processes"
kill ${ZMQ_PID} 
sleep 1 
kill -0 ${ZMQ_PID} &> /dev/null || exit 0 
echo "Kill like you mean it"
kill -9 ${ZMQ_PID}]]></param>
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Gentoo_Catalyst_GentooCatalyst">
        <checkout-rule rule="+:.=&gt;catalyst/" />
      </vcs-entry-ref>
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="vcsTrigger" type="vcsTrigger">
        <parameters>
          <param name="quietPeriodMode" value="DO_NOT_USE" />
          <param name="triggerRules" value="+:root=Gentoo_Catalyst_GentooCatalyst:**" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters />
      </extension>
    </build-extensions>
    <cleanup />
  </settings>
</build-type>

